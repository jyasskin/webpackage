# Bundle Algorithms # {#bundle-algorithms}

<h3 algorithm id="identifying-bundles">Identifying bundles</h3>

The <dfn>bundle version</dfn> of a [=response=] |response| is the
result of the following steps:

1. If <a spec="fetch">determine nosniff</a> on |response|'s [=response/header
    list=] returns false, return undefined.

    Note: This requires servers to include the `X-Content-Type-Options: nosniff`
    header when they serve bundles, which prevents some clients that don't
    understand bundles from interpreting one as another content type.

1. Let |mimeType| be the result of [=header list/extracting a MIME type=] from
    |response|'s [=response/header list=].

    Note: If the |response| is loading from a `file` [=URL=], its
    [=response/header list=] is ["left as an exercise for the
    reader."](https://fetch.spec.whatwg.org/#concept-scheme-fetch) If the
    filesystem doesn't natively support mime types or associate particular
    extensions with particular mime types, the UA might examine the initial
    bytes of the file to choose a mime type.

1. If |mimeType| is a failure, return undefined.
1. If |mimeType|'s [=MIME type/essence=] is not `"application/webbundle"`,
    return undefined.
1. Let |params| be |mimeType|'s [=MIME type/parameters=]
1. If |params|["v"] exists, return it. Otherwise, return undefined.

<h3 algorithm id="parsing-bundle">Parsing bundles</h3>

This section defines how to load the format defined in
[[draft-yasskin-wpack-bundled-exchanges]].

<dfn>Parsing a bundle</dfn> from a [=response=] |response| in the context of an
[=environment settings object=] |client|, reporting to a [=bundle report=]
|report|, returns a [=bundle=] or a string which indicates a [=bundle
report/result=] as described by the following steps

1. Assert: This algorithm is running [=in parallel=].
1. If |response|'s [=response/URL=]'s [=url/origin=] is not a [=potentially
    trustworthy origin=], return
    "[=bundle report/non_secure_distributor=]".

    Note: This ensures that the privacy properties of retrieving a cross-origin
    HTTPS resource via a bundle are no worse than retrieving it via TLS.

    Issue: Should non-HTTPS origins be able to use unsigned same-origin bundles?
    Tentatively no.

1. Let |bodyStream| be |response|'s [=response/body=]'s [=body/stream=].
1. If |bodyStream| is null, return "[=signed exchange report/parse_error=]".
1. Let |stream| be a [=new read buffer=] for |bodyStream|.
1. Let |bundleMetadata| be the result of [=loading a bundle's metadata=] from
    |stream|.

    Issue: This needs to refer to the algorithm to load the `b1` version, but
    [=loading a bundle's metadata=] currently refers to the draft that
    anticipates version `1`.

1. If |bundleMetadata| is:

    <dl class="switch">

    <dt>A "format error"
    <dd>Return "[=bundle report/parse_error=]"

    <dt>A "version error" with a |fallbackUrl|</dt>
    <dd>Return "[=bundle report/version_error=]" and |fallbackUrl|.

    <dt>A [=map=] of metadata
    <dd>Continue to the following steps.

    </dl>

1. Set |report|'s [=bundle report/inner URL=] to
    |bundleMetadata|["primaryUrl"].

1. Let |crossOriginSubsets| be the [=valid cross-origin signatures=] of
    |bundleMetadata|.

1. Let |manifest| be an initially-null [=processed manifest=].

1. If |bundleMetadata| has a "manifest" key:

    Note: These steps are based on the [=steps for obtaining a manifest=].

    1. Let |request| be a new [=request=] with its fields set as follows:
        * Its [=request/client=] is |client|.
        * Its [=request/URL=] is |bundleManifest|["manifest"].
        * Its [=request/mode=] is "cors".

    1. Let |manifestResponse| be the result of [=raw-fetching a nested
        resource=] using |request|, |bundleMetadata|, and |stream|.

    1. If |manifestResponse| is a network error, abort these sub-steps.

    1. Let |text| be the result of [=UTF-8 decoding=] |manifestResponse|'s
        [=response/body=].

    1. Set |manifest| to the result of [=processing a manifest=] given |text|,
        |bundleMetadata|["manifest"], and |bundleMetadata|["primaryUrl"].

    1. If |manifest|'s {{WebAppManifest/start_url}} is not [=url/equal=] to
        |bundleMetadata|["primaryUrl"], return [=bundle
        report/inconsistent_start_url_error=].

1. If |manifest| is null, set it to a new [=processed manifest=] with a
    {{WebAppManifest/start_url}} of |bundleMetadata|["primaryUrl"].

1. Let |bundle| be a new [=bundle=].

1. Set |bundle|'s [=bundle/manifest=] to |manifest|.

1. Convert ResponseMetadata to promises.

1. Identify bundle and subresources as trusted or not.

1. If |parsedSignature| [=exchange signature/does not establish cross-origin
    trust=] for |parsedExchange|, return
    "[=signed exchange report/cert_verification_error=]".
1. Set |parsedExchange|'s [=exchange/response=]'s [=response/HTTPS state=] to
    either "`deprecated`" or "`modern`".

    Note: See <a spec="fetch">HTTP-network fetch</a> for details of this choice.
1. If |parsedExchange|'s [=exchange/response=]'s [=response/status=] is a
    [=redirect status=] or the [=signed exchange version=] of |parsedExchange|'s
    [=exchange/response=] is not undefined, return
    "[=signed exchange report/parse_error=]".

    Note: This might simplify the UA's implementation, since it doesn't have to
    handle nested signed exchanges.
1. [=Read a body=] from |stream| into |parsedExchange|'s
    [=exchange/response=] using |parsedSignature| to check its integrity. If
    this returns an error string, return it.

    Note: Typically this body’s stream is still being enqueued to after
    returning.
1. Return |parsedExchange|.

<h3 algorithm id="validating-signatures">Validating cross-origin signatures</h3>

While a bundle can contain lots of subsets vouched by arbitrary authorities, the
UA only cares about authorities that chain to a trusted root CA and that are
trusted for the hosts of the resources in the subset.

A <dfn>trusted subset</dfn> is a [=struct=] with the following items:

<dl dfn-for="trusted subset">

: <dfn>origin</dfn>
:: The [=origin=] of all trusted resources in the subset.

: <dfn>hashes</dfn>

:: A [=map=] from [=URL=]s to [=pairs=] of a <a http-header>Variants</a> value
    and a [=list=] of [=resource integrity=] [=structs=].

</dl>

A <dfn>resource integrity</dfn> [=struct=] has the following items:

<dl dfn-for="resource integrity">

: <dfn>header SHA-256</dfn>
:: The SHA-256 digest of a byte string to be parsed into a [=response=] [=header
    list=].

: <dfn>payload integrity header</dfn>
:: The name of a header that guards the integrity of a [=response=]
    [=response/body=]. Currently this must be `"digest/mi-sha256"`.

</dl>

The <dfn>valid cross-origin signatures</dfn> of a |bundleMetadata| are the
[=trusted subsets=] in the [=set=] returned by the following steps:

1. Let |result| be a [=set=] of [=trusted subsets=], initially empty.
1. If |bundleMetadata| does not contain both an "authorities" and a
    "vouched-subsets" key, return |result|.
1. Let |authorities| be |bundleMetadata|["authorities"].
1. For each |vouchedSubset| in |bundleMetadata|["vouched-subsets"]:
    1. Let |authority| be |authorities|[|vouchedSubset|["authority"]].
    1. If |vouchedSubset|["sig"] is not a valid signature of
        |vouchedSubset|["signed"] by |authority|, continue to the next subset.

        Issue: We need to specify which signature algorithm corresponds to each
        possible kind of authority. Initially, that's just X.509 EC
        certificates.
    1. Let |subset| be the result of [=parsing a CBOR item=] from
        |vouchedSubset|["signed"], matching the [=signed-subset rule=].
    1. If the SHA-256 hash of |authority|["cert"] is not equal to
        |subset|["auth-sha256"], continue to the next subset.
    1. Let |origin| be the [=url/origin=] of |subset|["validity-url"].
    1. If the [=certificate chain=] that is the concatenation of «|authority|»
        and |authorities| [=does not have a trusted leaf=] for |origin|,
        continue to the next subset.
    1. [=set/Append=] to |result| a new [=trusted subset=] whose [=trusted
        subset/origin=] is |origin| and whose [=trusted subset/hashes=] are
        |subset|["subset-hashes"].
1. Return |result|.

<h3 algorithm id="raw-fetch-nested">Raw-fetching a nested resource</h3>

This algorithm is the guts of pulling a resource out of a bundle. It's a component of the higher-level operations.

<dfn>Raw-fetching a nested resource</dfn> using a [=request=] |request|, a
[=map=] of metadata, |bundleMetadata| returned by [=Load a bundle’s metadata=],
and a [=read buffer=] |stream| that holds the bundle, returns the result of the
following steps:

1. Let |requestUrl| be |request|'s [=request/URL=].
1. If |bundleMetadata|["requests"] does not [=map/contain=] |requestUrl|, return
    a [=network error=].
1. Let |responseMetadata| be an initially-null opaque `ResponseMetadata`
    structure.

1. Switch on the type of |bundleMetadata|["requests"][|requestUrl|]:

    <dl class="switch">
        <dt>A single `ResponseMetadata`</dt>
        <dd>Set |responseMetadata| to that value.</dd>

        <dt>A parsed <a http-header>Variants</a> header value |variants| and a
        map |responses|</dt>
        <dd>
            1. Let |acceptable-responses| be the [=list=] of lists returned by
                the [=Variants cache behavior=] algorithm, run over |request|'s
                [=request/header list=] and using |variants| as the
                <var ignore>variants-header</var> value that would have been
                derived from the <var ignore>stored-responses</var> value.

                Issue: We should refactor the [=Variants cache behavior=]
                algorithm so we can pass the variants value instead of a list
                of responses.

            1. For each |acceptable-response| in |acceptable-responses|, if
                |responses|[|acceptable-response|] [=map/exists=], set |responseMetadata| to that value.
        </dd>
    </dl>

1. If |responseMetadata| is still null, return a [=network error=]. No
    acceptable response was present.

1. Return the result of [=loading a response from a bundle=] |stream| passing
    |request| and |responseMetadata|.

<h3 algorithm id="create-new-bundle-report">Create a new bundle report</h3>
To <dfn>create a new bundle report</dfn> with |request| and
|actualResponse|, the UA MUST:

1. Let |report| be a new [=bundle report=] struct.
1. Set |report|'s [=bundle report/outer request=] to |request|.
1. Set |report|'s [=bundle report/outer response=] to |actualResponse|.
1. Set |report|'s [=bundle report/server IP=] to the IP address of the
    server from which the user agent received the |actualResponse|, if
    available.
1. Return |report|.

<h3 algorithm id="wait-and-queue-a-bundle-report">Wait and queue a bundle report</h3>
To <dfn>wait and queue a bundle report for</dfn> |parsedBundle| and |report|, the UA
MUST:

1. Wait until |parsedBundle|'s [=response/body=]'s [=body/stream=] is
    [=ReadableStream/closed=] or [=ReadableStream/errored=].
1. If |parsedBundle|'s [=response/body=]'s [=body/stream=] is
    [=ReadableStream/closed=], run [=queue a bundle report=] |report|
    with "[=bundle report/ok=]" as the result and abort these steps.
1. If |parsedBundle|'s [=response/body=]'s [=body/stream=] is
    [=ReadableStream/errored=], run [=queue a bundle report=] |report|
    with "[=bundle report/mi_error=]" as the result.

<h3 algorithm id="queue-bundle-report">Queuing a bundle report</h3>

To <dfn>queue a bundle report</dfn> |report| with |result| as the
result, the UA MUST:

1. Set |report|'s [=bundle report/result=] to |result|.

1. Let |report body| and |policy| be the result of
    [=generate a network error report=]</a> with |report|'s
    [=bundle report/outer request=]. If the result is null, abort
    these steps.

1. If |report body|'s `"type"` is `"dns.address_changed"`, abort these steps.

    Note: This means that the NEL report was downgraded because the IP addresses
    of the server and the |policy| don't match. In this case, the UA has called
    [=deliver a network report=] algorithm with the error report while handling
    the response. So we don't need to send the same error report while
    processing the response as a bundle.

1. Add a new property `"sxg"` to |report body| with a new ECMAScript object with
     the following properties:

    * `outer_url`: The [=URL serializer|serialization=] of |report|'s
          [=bundle report/outer request=]'s [=request/url=].
    * `inner_url`: The [=URL serializer|serialization=] of |report|'s
          [=bundle report/inner URL=].
    * `cert_url`: The [=sequence type=] of the result of
          [=URL serializer|serialization=] of each element of |report|'s
          [=bundle report/cert URL list=].

1. Set |report body|'s `"phase"` to `"sxg"`.

1. If the |report|'s [=bundle report/result=] is
    "[=bundle report/ok=]", set |report body|'s `"type"` to `"ok"`.
    Otherwise, set |report body|'s `"type"` to the result of concatenating a
    string `"sxg."` and the |report|'s [=bundle report/result=].

1. If |report body|'s `"sxg"`'s `"cert_url"`'s [=url/scheme=] is not `"data"`
    and |report|'s [=bundle report/result=] is
    "[=bundle report/signature_verification_error=]" or
    "[=bundle report/cert_verification_error=]" or
    "[=bundle report/cert_fetch_error=]" or
    "[=bundle report/cert_parse_error=]":

    1. If |report|'s [=bundle report/outer request=]'s
        [=request/url=]'s [=url/origin=] is different from any [=url/origin=] of
        the URLs in |report|'s [=bundle report/cert URL list=], or
        |report|'s [=bundle report/server IP=] is different from
        any of the IP address in |report|'s
        [=bundle report/cert server IP list=]:

        1. Set |report body|'s `"type"` to `"sxg.failed"`.
        1. Set |report body|'s `"elapsed_time"` to 0.

    Note: This step "downgrades" a bundle report if the certificate
    was served from the different server from the server of `"outer_url"`. This
    is intended to avoid leaking the information about the certificate server.
1. [=Deliver a network report=] with |report body| and |policy| and
    |report|'s [=bundle report/outer request=].

    <div class="example" id="example-bundle-network-error-log">
    If a [=NEL policy=] was received from the distributor's origin,
    `distributor.example`, this step  will send the following JSON data to
    describe an invalid signature:
    <pre highlight="json">
    {
      "type": "network-error",
      "url": "https://publisher.example/article.html",
      "age": 234,
      "user_agent": "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) ...",
      "body": {
        "referrer": "https://aggregator.example/article.html",
        "sampling_fraction": 1,
        "server_ip": "192.0.2.42",  // The IP address of distributor.example.
        "protocol": "http/1.1",
        "method": "GET",
        "status_code": 200,
        "elapsed_time": 1234,
        "phase": "sxg",
        "type": "sxg.signature_verification_error",
        "sxg": {
          "outer_url": "https://distributor.example/publisher.example/article.html.sxg",
          "inner_url": "https://publisher.example/article.html",
          "cert_url": ["https://distributor.example/publisher.example/cert"]
        },
      }
    }
    </pre>
    </div>
